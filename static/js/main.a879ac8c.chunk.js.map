{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","entries","setEntries","groups","setGroups","activeGroup","setActiveGroup","useEffect","contentful","space","accessToken","getEntries","then","r","items","map","i","fields","reduce","acc","currentValue","indexOf","group","console","log","className","onClick","filter","entry","style","width","alt","src","image","file","url","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAoDeA,MA9Cf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGyBJ,mBAAS,IAHlC,mBAGNK,EAHM,KAGOC,EAHP,KAuBb,OAnBAC,qBAAU,WACOC,eAAwB,CACrCC,MAPW,eAQXC,YATc,gDAWTC,aAAaC,MAAK,SAACC,GACxB,IAAMZ,EAAUY,EAAEC,MAAMC,KAAI,SAACC,GAAD,OAAYA,EAAEC,UACpCd,EAASF,EAAQiB,QAAO,SAACC,EAAeC,GAC5C,OAAID,EAAIE,QAAQD,EAAaE,OAAS,EAC9B,GAAN,mBAAWH,GAAX,CAAgBC,EAAaE,QAExBH,IACN,IACHf,EAAUD,GACVD,EAAWD,GACXsB,QAAQC,IAAIvB,GACZK,EAAeH,EAAO,SAEvB,IAED,sBAAKsB,UAAU,MAAf,UACGtB,EAAOY,KAAI,SAACO,GAAD,OACV,qBACEI,QAAS,kBAAMpB,EAAegB,IAC9BG,UAAS,eAAUH,EAAV,YAAmBjB,IAAgBiB,EAAQ,SAAW,IAFjE,SAIGA,OAGJrB,EACE0B,QAAO,SAACC,GAAD,OAAgBA,EAAMN,QAAUjB,KACvCU,KAAI,SAACa,GAAD,OACH,qBACEC,MAAO,CAAEC,MAAO,QAChBC,IAAI,OACJC,IAAKJ,EAAMK,MAAMhB,OAAOiB,KAAKC,aC/B1BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a879ac8c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as contentful from \"contentful\";\n\nconst accessToken = \"yIwMebq5Mhdp3PQbS-h4_T7RWP5LsprSLjnobyn22Ws\";\nconst SPACE_ID = \"90qprjmlum8i\";\nfunction App() {\n  const [entries, setEntries] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [activeGroup, setActiveGroup] = useState(\"\");\n  useEffect(() => {\n    const client = contentful.createClient({\n      space: SPACE_ID,\n      accessToken,\n    });\n    client.getEntries().then((r: any) => {\n      const entries = r.items.map((i: any) => i.fields);\n      const groups = entries.reduce((acc: string[], currentValue: any) => {\n        if (acc.indexOf(currentValue.group) < 0) {\n          return [...acc, currentValue.group];\n        }\n        return acc;\n      }, []);\n      setGroups(groups);\n      setEntries(entries);\n      console.log(entries);\n      setActiveGroup(groups[0]);\n    });\n  }, []);\n  return (\n    <div className=\"App\">\n      {groups.map((group: any) => (\n        <div\n          onClick={() => setActiveGroup(group)}\n          className={`link ${group} ${activeGroup === group ? \"active\" : \"\"}`}\n        >\n          {group}\n        </div>\n      ))}\n      {entries\n        .filter((entry: any) => entry.group === activeGroup)\n        .map((entry: any) => (\n          <img\n            style={{ width: \"100%\" }}\n            alt=\"fuck\"\n            src={entry.image.fields.file.url}\n          ></img>\n        ))}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}